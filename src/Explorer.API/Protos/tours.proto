
syntax = "proto3";

option csharp_namespace = "GrpcServiceTranscoding";
import "Protos/google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service Tour {
	// Equipment
	rpc GetAvailableEquipment (EquipmentIds) returns (EquipmentsResponse) {
		option (google.api.http) = {
			get: "/api/tours/{id}/equipment/available"
		};
	}
	rpc GetAllEquipment (Page) returns (PagedEquipmentsResponse) {
		option (google.api.http) = {
			get: "/api/administration/equipment"
		};
	}
	rpc GetEquipment (Id) returns (EquipmentResponse) {
		option (google.api.http) = {
			get: "/api/administration/equipment/{id}"
		};
	}
	rpc CreateEquipment (EquipmentResponse) returns (EquipmentResponse) {
		option (google.api.http) = {
			post: "/api/administration/equipment"
			body: "*"
		};
	}
	rpc UpdateEquipment (UpdateEquipmentId) returns (EquipmentResponse) {
		option (google.api.http) = {
			put: "/api/administration/equipment/{id}"
			body: "*"
		};
	}
	rpc DeleteEquipment (Id) returns (blank) {
		option (google.api.http) = {
			delete: "/api/administration/equipment/{id}"
		};
	}
	
	// Tour
    rpc GetAllTour (Page) returns (PagedToursResponse) {
		option (google.api.http) = {
			get: "/api/administration/tours"
		};
	}
    rpc GetTour (Id) returns (TourResponse) {
		option (google.api.http) = {
			get: "/api/administration/tours/{id}"
		};
	}
	rpc CreateTour (TourResponse) returns (TourResponse) {
		option (google.api.http) = {
			post: "/api/administration/tours"
			body: "*"
		};
	}
    rpc UpdateTour (UpdateTourId) returns (TourResponse) {
		option (google.api.http) = {
			post: "/api/administration/tours/{id}"
			body: "*"
		};
	}
    rpc DeleteTour (Id) returns (blank) {
		option (google.api.http) = {
			delete: "/api/administration/tours/{id}"
		};
	}
    rpc GetTourByAuthorId (TourByAuthorId) returns (ToursResponse) {
		option (google.api.http) = {
			get: "/api/administration/tours/author/{id}"
		};
	}
	rpc AddTourEquipment (TourEquipment) returns (blank) {
		option (google.api.http) = {
			post: "/api/administration/tours/{id}/equipment/{equipmentId}"
			body: "*"
		};
	}
	rpc DeleteTourEquipment (TourEquipment) returns (blank) {
		option (google.api.http) = {
			delete: "/api/administration/tours/{id}/equipment/{equipmentId}"
		};
	}


	// PublishedTour
	// TourReview
	// PublicCheckpoint
    // Checkpoints
	rpc GetAllCheckpoints(Page) returns (PagedCheckpoints){
		option (google.api.http) = {
			get: "/api/administration/checkpoint"
		};
	}
	rpc GetAllCheckpointsByTour(PageWithId) returns (CheckpointsResponse){
		option (google.api.http) = {
			get: "/api/administration/checkpoint/{id}"
		};
	}
	rpc GetCheckpointById(Id) returns (CheckpointResponse){
		option (google.api.http) = {
			get: "/api/administration/checkpoint/details/{id}"
		};
	}
	rpc CreateCheckpoint(CreateCheckpointRequest) returns (CheckpointResponse){
		option (google.api.http)={
			post: "/api/administration/checkpoint/create/{status}"
			body:"*"
		};
	}
	rpc UpdateCheckpoint(UpdateCheckpointRequest) returns (CheckpointResponse){
		option (google.api.http)={
			put: "/api/administration/checkpoint/{id}"
		};
	}
	rpc DeleteCheckpoint(Id) returns (blank){
		option (google.api.http)={
			delete: "/api/administration/checkpoint/{id}"
		};
	}

	// TouristPosition
	rpc GetAllTouristPostions(Page) returns (PagedTouristPositionResponse){
		option (google.api.http) = {
			get: "/api/tourism/position"
		};
	}
	rpc GetTouristPostionByCreatorId(TouristPositionByCreator) returns (TouristPositionResponse){
		option (google.api.http) = {
			get: "/api/tourism/position/{id}"
		};
	}
	rpc CreateTouristPostion(TouristPositionResponse) returns (TouristPositionResponse){
		option (google.api.http)={
			post: "/api/tourism/position"
			body:"*"
		};
	}
	rpc UpdateTouristPosition(UpdateTouristPositionRequest) returns (TouristPositionResponse){
		option (google.api.http)={
			put: "/api/tourism/position/{id}"
		};
	}
	rpc DeleteTouristPosition(Id) returns (blank){
		option (google.api.http)={
			delete: "/api/tourism/position/{id}"
		};
	}

	// TourExecution
}

message CreateCheckpointRequest{
	CheckpointResponse checkpoint = 1;
	string status = 2;
	repeated bytes pictures = 3;
}
message UpdateCheckpointRequest{
	CheckpointResponse checkpoint = 1;
	string id = 2;
	repeated bytes pictures = 3;
}
message PagedCheckpoints{
	repeated CheckpointResponse results= 1;
	int32 totalCount = 2;
}
message blank{}
message Page{
	int32 page = 1;
	int32 pageSize = 2;
}
message PageWithId{
	int32 page = 1;
	int32 pageSize = 2;
	string id = 3;
}
message Id{
	string id = 1;
}

// Equipment
message EquipmentIds{
	string id = 1;
	repeated string equipmentIds = 2;
}
message EquipmentResponse{
	string id = 1;
	string name = 2;
	string description = 3;
}
message EquipmentsResponse{
	repeated EquipmentResponse results = 1;
}
message UpdateEquipmentId{
	EquipmentResponse equipment = 1;
	string id = 2;
}
message PagedEquipmentsResponse{
	repeated EquipmentResponse results = 1;
	int32 totalCount = 2;
}

// Tour
message TourResponse{
	string id = 1;
	int64 authorId = 2;
	string name = 3;
    string description = 4;
    string difficulty = 5;
	string status = 6;
	double price = 7;
    repeated string tags = 8;
    repeated EquipmentResponse equipment = 9;
    repeated CheckpointResponse checkpoints = 10;
}
message ToursResponse{
	repeated TourResponse results = 1;
}
message PagedToursResponse{
	repeated TourResponse results = 1;
	int32 totalCount = 2;
}
message UpdateTourId{
	TourResponse tour = 1;
	string id = 2;
}
message TourByAuthorId{
	int32 page = 1;
	int32 pageSize = 2;
	int64 id = 3;
}
message TourEquipment{
	string id = 1;
	string equipmentId = 2;
}

// PublishedTour

// TourReview

// PublicCheckpoint

// Checkpoint
message CheckpointResponse{
	string id = 1;
	string tourId = 2;
	int64 authorId = 3;
	double longitude = 4;
	double latitude = 5;
	string name = 6;
	string description = 7;
	repeated string pictures = 8;
	double requiredTimeInSeconds = 9;
	//TODO checkpointSecret 
	int64 encounterId = 10;
	bool isSecretPrerequisite = 11;
}
message CheckpointsResponse{
	repeated CheckpointResponse checkpoints = 1;
}

// TouristPosition
message TouristPositionResponse{
	string id = 1;
	int64 creatorId = 2;
	float longitude = 3;
	float latitude = 4;
}
message PagedTouristPositionResponse{
	repeated TouristPositionResponse results = 1;
	int32 totalCount = 2;
}
message TouristPositionByCreator{
	int32 page = 1;
	int32 pageSize = 2;
	string id = 3;
}
message UpdateTouristPositionRequest{
	TouristPositionResponse position = 1;
	string id = 2;
}

// TourExecution
